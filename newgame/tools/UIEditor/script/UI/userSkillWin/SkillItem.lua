-- SkillItem.lua-- created by lyl on 2012-12-3-- 角色技能窗口super_class.SkillItem()--super_class.SkillItem( SlotMove )require "utils/UI/UILabel"require "model/UserSkillModel"--根据技能id，创建技能iconlocal function create_skill_icon_by_id( skill_base, skill_player, po_x , po_y, size_w, size_h)    require "UI/component/SlotSkill"    local skill_slot = SlotSkill(size_w, size_h)    --设置技能的icon    if skill_base ~= nil then        skill_slot:set_icon( skill_base.id )        -- skill_slot:set_icon_texture(UILH_NORMAL.skill_bg_b, -4, -4, 94, 94 )    end    skill_slot:setPosition( po_x, po_y )    -- 技能的点击的触发事件    local function slot_fun()        -- print("lyl!!!!!!!!!!!!!!!!!!  ", skill_base.id )    end    skill_slot:set_click_event( slot_fun )    return skill_slotend--创建一个技能item：参数：function SkillItem:create_item( panel, pos_x, pos_y, size_w, size_h, skill_base )    local bgPanel_1 = CCBasePanel:panelWithFile( pos_x, pos_y, size_w, size_h, nil,500,500);  --每个技能最大背景    panel:addChild( bgPanel_1 )        local skill_player = UserSkillModel:get_a_skill_by_id( skill_base.id )    --技能icon区域的背景    local bgPanel_2 = CCZXImage:imageWithFile( pos_x , pos_y, -1, -1, UILH_NORMAL.skill_bg_b);      panel:addChild( bgPanel_2 )    -- 技能slot    local slot_skill = create_skill_icon_by_id( skill_base, skill_player , pos_x +13, pos_y + 12, 70, 70)    panel:addChild( slot_skill.view )    --技能左下角等级底色圈    local level_bg = CCZXImage:imageWithFile( pos_x, pos_y, 25, 25, UILH_SKILL.m_lv_bg);      panel:addChild( level_bg )    -- add after tjxs 96:背景框大小，38：加号大小，4：微调整    self.update_tip = CCZXImage:imageWithFile( pos_x+96-38+4, pos_y+94-38+4, -1, -1, UILH_SKILL.add_mark);      panel:addChild( self.update_tip )    local selected_frame = ZImage.new(UILH_NORMAL.item_bg3_sld)    selected_frame.view:setSize(87, 87)    selected_frame:setPosition(-8, -8)    selected_frame.view:setIsVisible(false)    slot_skill.view:addChild(selected_frame.view, 10)    slot_skill.selected_frame = selected_frame    -- 设置拖动信息。  被动技能不能拖动    if skill_base.skillType ~= 1 then         self:set_skill_drag_info(slot_skill, skill_player)    else         slot_skill:set_enable_drag_out(false);    end    -- 如果没有学习，要变暗    if not skill_player then        -- slot_skill:set_icon_dead_color()    end    -- slot_skill.skill_player = skill_player   -- slot主要保存的数据， 更新后要更新这个数据。    -- 事件    local function slot_fun_click()        -- UserSkillModel:show_skill_tips( skill_base.id )        self.skillWin:ItemBeedClicked(self, skill_base )    end    slot_skill:set_click_event(slot_fun_click)    -- local skill_name = skill_base.name                                       --技能等级    slot_skill.label_level = UILabel:create_label_1( "", CCSize(200,20), 12, 15, 14,  CCTextAlignmentCenter, 255, 255, 255)    level_bg:addChild( slot_skill.label_level )    --slot_skill.label_level = ZLabel:create(level_bg,"",6, 6, 14,1)    --技能名称    -- function UILabel:create_label_1(lable, dimensions, pos_x, pos_y, fontsize, alignment, r, g, b)    -- slot_skill.label_name  = UILabel:create_label_1( skill_name, CCSize(100,20), 30, -20, 19,  CCTextAlignmentCenter, 67, 207, 212)    -- slot_skill.view:addChild( slot_skill.label_name )    --slot_skill.if_can_upgrade  = UILabel:create_label_1( "", CCSize(200,20), 183, 56 - 46, 14,  CCTextAlignmentLeft, 255, 255, 0)    --slot_skill.view:addChild( slot_skill.if_can_upgrade )    -- -- 升级或者学习按钮    -- local function upgrade_but_CB( )    --     UserSkillModel:study_or_upgrade_a_skill( skill_base.id )    -- end    -- self.upgrade_but = UIButton:create_button_with_name( 86 , 4, -1, -1, UIResourcePath.FileLocate.common .. "button2.png", UIResourcePath.FileLocate.common .. "button2.png", nil, "", upgrade_but_CB )    -- bgPanel_1:addChild( self.upgrade_but )    -- self.upgrade_but:setIsVisible(false)    -- -- 按钮文字    -- self.but_lable = UILabel:create_lable_2( LangGameString[841], 32, 7, 16, ALIGN_CENTER ) -- [841]="升级"    -- self.upgrade_but:addChild( self.but_lable )    -- local bgPanel_2 = CCZXImage:imageWithFile( pos_x - 16, pos_y + 6, 68, 67, UIResourcePath.FileLocate.main .. "m_skill_bg.png");  --技能icon区域的背景    -- panel:addChild( bgPanel_2 )    -- -- 如果是被动技能，要显示 被动 两个字    -- if skill_base.skillType == 1 then    --     slot_skill.beidong = UILabel:create_label_1( LangGameString[854], CCSize(100,20), pos_x + 34, pos_y + 76, 16,  CCTextAlignmentLeft, 255, 255, 0) -- [854]="被动"    --     panel:addChild( slot_skill.beidong, 2)    -- end    -- slot_skill:set_skill_passive( skill_base.id )    -- print( " 创建技能  SkillItem:create_item    ",   skill_base.id, skill_base.name)       self.slot_skill = slot_skill    self:update()endfunction SkillItem:set_selected( selected )    self.slot_skill.selected_frame.view:setIsVisible(selected)end-- 更新技能信息； 技能中值存储skillid，所以只需跟心是否可以升级，等级等状态.function SkillItem:update()    -- print("  单个技能更新  ", self.skill_id)    -- 先从model中获取数据，如果获取不到，就说明还没有学习该技能。就不用设置值了    require "model/UserSkillModel"    local skill_player =  UserSkillModel:get_a_skill_by_id( self.skill_id )    -- 如果没有学习，要变暗    if skill_player == nil then        self.slot_skill:set_icon_dead_color()    else        self.slot_skill:set_icon_light_color()    end    self.slot_skill:set_drag_info( 2, "user_skill_win", skill_player)    local skill_level = 0                                                --技能等级    local need_player_level = UserSkillModel:get_up_con_by_skill_id( self.skill_id, "level" )  -- 学习技能的低等级    --local if_can_upgrade = ""                                            --技能是否可以升级        local if_can_check, can_not_type = UserSkillModel:check_skill_if_can_upgrade( self.skill_id )    -- print("升级    ", if_can_check, can_not_type, self.skill_id)    -- skill_player是不为nil，表示没有学习，就显示可升级或者不可升级    self.skill_level = 0    if skill_player then        skill_level = ""..skill_player.level        --if_can_upgrade = LangGameString[2125] -- [2125]="不可升级"        if if_can_check then                                    -- 可升级，隐藏提示lable，显示升级按钮            self.update_tip:setIsVisible(true)            -- if_can_upgrade = "#cffff00可升级"            -- self.but_lable:setString( LangGameString[841] ) -- [841]="升级"            -- self.upgrade_but:setIsVisible( true )            -- self.upgrade_but:setCurState( CLICK_STATE_UP )            -- self.slot_skill.if_can_upgrade:setIsVisible( false )        elseif can_not_type == "skill_top" then                 -- 满级，隐藏按钮，显示提示lable            self.update_tip:setIsVisible(false)            --if_can_upgrade = LangGameString[2126] -- [2126]="#cffff00已满级"            -- self.upgrade_but:setIsVisible( false )            --self.slot_skill.if_can_upgrade:setIsVisible( true )            --self.slot_skill.if_can_upgrade:setString(if_can_upgrade)        -- elseif can_not_type ~= "level" then        --     if_can_upgrade = "#c808080可升级"     -- todo 设置灰色#c        else                                                    -- 不可升级，隐藏按钮，隐藏提示lable            self.update_tip:setIsVisible(false)            -- self.but_lable:setString( LangGameString[841] ) -- [841]="升级"            -- self.upgrade_but:setIsVisible( true )            -- self.upgrade_but:setCurState( CLICK_STATE_DISABLE )              -- self.slot_skill.if_can_upgrade:setIsVisible( false )        end    else        -- skill_level = LangGameString[1976]..need_player_level -- [1976]="需要等级:"        skill_level = 0        --if_can_upgrade = LangGameString[2014] -- [2014]="未学习"        if if_can_check then                                    -- 可学习，隐藏提示lable，显示学习按钮            self.update_tip:setIsVisible(true)            -- if_can_upgrade = "#cffff00可学习"            -- self.but_lable:setString( LangGameString[840] ) -- [840]="学习"            -- self.upgrade_but:setIsVisible( true )            -- self.upgrade_but:setCurState( CLICK_STATE_UP )            -- self.slot_skill.if_can_upgrade:setIsVisible( true )            -- self.slot_skill.if_can_upgrade:setString(if_can_upgrade)        -- elseif can_not_type ~= "level" then        --     if_can_upgrade = "#c808080可学习"      -- todo 设置灰色#c        else                                                   -- 不可学习，满级，隐藏按钮，显示提示lable            self.update_tip:setIsVisible(false)            -- self.upgrade_but:setIsVisible( false )            -- self.slot_skill.if_can_upgrade:setIsVisible( true )            -- self.slot_skill.if_can_upgrade:setString(if_can_upgrade)        end    end    -- print(can_not_type.. "   SkillItem:update")    self.slot_skill.label_level:setString(skill_level)    -- self.skill_level = tonumber(skill_level)    -- self.slot_skill.if_can_upgrade:setString(if_can_upgrade)end--function SkillItem:__init( panel, pos_x, pos_y, size_w, size_h, skill_base )    -- self.label_t = {}       --存储文字label的table，这样可以动态地获取修改文字内容    -- self.skill_base = skill_base    -- self.skill_player = skill_player    --存储id    self.skill_id = skill_base.id    self.skill_base = skill_base    self:create_item(panel, pos_x, pos_y, size_w, size_h, skill_base )end---- function SkillItem:create(panel, pos_x, pos_y, size_w, size_h, skill_base, skill_player)-- 	return SkillItem( panel, pos_x, pos_y, size_w, size_h, skill_base, skill_player )-- end-- 获取技能升级需要的银两function SkillItem:get_upgr_need_money( )    require "model/UserSkillModel"    -- print( " 升级需要银两 ", self.skill_id, UserSkillModel:get_up_con_by_skill_id( self.skill_id, "money" ))    return UserSkillModel:get_up_con_by_skill_id( self.skill_id, "money" )end-- 获取技能升级需要的经验function SkillItem:get_upgr_need_exp( )    require "model/UserSkillModel"    return UserSkillModel:get_up_con_by_skill_id( self.skill_id, "exp" )end-- 设置 技能 的拖动支持function SkillItem:set_skill_drag_info( slot_skill, skill_player)    -- print("!!!  SkillItem:set_skill_drag_info !!! ",skill_player)    -- slot_skill:set_drag_info( 2, "user_skill_win", skill_player)    local function drag_out( self_item )         print(" 技能 ， 拖动 drag_out  ",self_item.obj_data.id)    end    local function begin_drag( self_item )        -- -- 主界面技能栏显示        -- local win = UIManager:find_visible_window("menus_panel");        -- if ( win ) then        --     win:show_or_hide_skill_panel(true);        -- end    end    local function drag_in( source_item )         -- print("技能 ， 拖动 drag_in " )    end    local function drag_callback( target_win )         print("技能 ， 拖入成功！")        -- local win = UIManager:find_visible_window("menus_panel");        -- if ( win ) then        --     win:show_or_hide_skill_panel(false);        -- end    end    local function drag_invalid_callback(drag_object )         -- print("背包 ， 拖入非法区域！")        -- drag_object:set_icon_texture(ItemConfig:get_item_icon(drag_object.obj_data.item_id));        -- local win = UIManager:find_visible_window("menus_panel");        -- if ( win ) then        --     win:show_or_hide_skill_panel(false);        -- end    end     local function discard_item_callback( drag_object )         print("背包 ， 拖入空地！")        -- local win = UIManager:find_visible_window("menus_panel");        -- if ( win ) then        --     win:show_or_hide_skill_panel(false);        -- end    end    slot_skill:set_drag_out_event( drag_out )    slot_skill:set_drag_in_event( drag_in )    slot_skill:set_drag_in_callback( drag_callback )    slot_skill:set_drag_invalid_callback(drag_invalid_callback);    slot_skill:set_discard_item_callback(discard_item_callback);    slot_skill:set_begin_drag_event( begin_drag )endfunction SkillItem:set_enable_drag_out( flag )    self.slot_skill:set_enable_drag_out(flag);end