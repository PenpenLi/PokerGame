-- TiPin.lua-- created by hcl on 2013-7-10-- 炼器--提品面板super_class.TiPin(Window)local _left_slotitem_item_source = nil   --左侧源item，保存起来，动态修改local _left_slotitem_item_target = nil   --左侧目标item，保存起来，动态修改local _left_slotitem_item_need = nil     --左侧需要升级道具item，保存起来，动态修改-- 材料序列号的集合。local _mate_series_t = {}--记录右侧装备区，是背包还是人物状态.默认是人物local _r_up_equi_or_bag = "equipment"local _t_scroll_item_info = {} local _item_num_need    = 0                 --需要物品的数量.  记录合成物品下面的数量显示local _item_num_have    = 0                 --选中物品的数量local _pay_for_synth    = 0                 --手续费function TiPin:__init(  )    self.panel_t = {}                  --存储panel的表。用于改变panel内容    self.label_t = {}                  --存储label的表。用于改变label显示的内容    self.right_item_t = {}             --存储右侧上部分的所有item。用于清空处理    self.r_up_scroll = nil    self.r_down_scroll = nil     --左侧     self.view:addChild( self:create_left_panel( 10, 10, 420, 488, UILH_COMMON.bottom_bg) )        --右侧     self.view:addChild( self:create_right_panel( 428, 10, 430, 488, UILH_COMMON.bottom_bg) ) end--刷新所有的panel 服务器通知物品发生改变，就被调用刷新function TiPin:syn_date(  )    self:syn_sele_item()    self:flash_all_item_right()endfunction TiPin:update( update_type )   -- print("TiPin:update( update_type )",update_type)    if update_type == "bag" or update_type == "bag_change" or update_type == "bag_add" or update_type == "bag_remove" then        self:syn_sele_item()        self:flash_all_item_right()    elseif update_type == "equipment" then        local _equip_info = _left_slotitem_item_source.equip_info        -- 如果装备品级小于4        if ( _equip_info and _equip_info.void_bytes_tab[1] < 4 ) then            self:set_left_item( "", _equip_info.item_id, _equip_info.strong, _equip_info.series );            if _cur_selected_item then                _cur_selected_item.update_data()            end        else            self:set_left_item( "", 0, nil, nil)            self:flash_all_item_right()        end        -- self:flash_all_item_right()        self:check_action_but_able()    elseif update_type == "all" then        -- LuaEffectManager:stop_view_effect( 11008,self.view)        -- LuaEffectManager:play_view_effect( 11008,165,280,self.view,true,10  );        self:syn_date(  )        self:set_default_item()    end end-- 同步选中装备的最新属性(重新从人物或者背包model获取数据)function TiPin:syn_sele_item(  )    print("TiPin:syn_sele_item............")    self:set_left_item( "", 0, nil, nil)end--================================================================================================================================--================================================================================================================================----左侧----================================================================================================================================--================================================================================================================================--创建左侧panelfunction TiPin:create_right_panel( pos_x, pos_y, width, height, texture_name )      local panel  =  CCBasePanel:panelWithFile( pos_x, pos_y, width, height,texture_name , 500, 500 )     --左底板    -- local panel1 = CCBasePanel:panelWithFile( 0, pos_y, 214, 480, UILH_FORGE.bg, 500, 500 )     -- --对称的右底板    --  local panel2 = CCBasePanel:panelWithFile(panel1:getSize().width-1, pos_y, 214, 480, UILH_FORGE.bg, 500, 500 )     --  panel2:setFlipX(true)      -- panel:addChild(panel1)    -- panel:addChild(panel2)    r_slot_high = 330    --原始item    _left_slotitem_item_source = self:create_item( panel, nil, 65, r_slot_high, 55, 55, "source" )    --_left_slotitem_item_source.view:setScale( 68 / 60 )    ZImage:create(_left_slotitem_item_source.icon_bg, UILH_FORGE.zb_img, 25, 34, -1, -1)              --结果item    _left_slotitem_item_target = self:create_item( panel, nil, 295, r_slot_high, 55, 55, "target" )   -- _left_slotitem_item_target.view:setScale( 68 / 60 )    ZImage:create(_left_slotitem_item_target.icon_bg, UILH_FORGE.zb_img, 25, 34, -1, -1)      --需要的道具           _left_slotitem_item_need   = self:create_item( panel, nil, 180, 135, 55, 55, "item_need" )          --需要道具items   -- _left_slotitem_item_need.view:setScale( 68 / 60 )    ZImage:create(_left_slotitem_item_need.icon_bg, UILH_FORGE.cl_img, 25, 34, -1, -1)   --  _left_slotitem_item_need2   = self:create_item( panel, nil, 240, 140, 55, 55, "item_need2" )          --需要道具items    -- 神佑符id，写死    -- _left_slotitem_item_need2:set_icon( 18760 );    -- local bg_ima_05 = CCZXImage:imageWithFile( -7, -7, 70, 70, UIPIC_FORGE_ITEM_BG );      -- _left_slotitem_item_need2.view:addChild( bg_ima_05, -1 )    -- 两个框框中间那个向右的箭头    local to_right_img = CCZXImage:imageWithFile(180, r_slot_high+11, -1, -1, UILH_COMMON.right_arrows )    panel:addChild(to_right_img)    -- local get_btn1 = self:add_buy_but_to_show_panel(_left_slotitem_item_need)    -- panel:addChild(get_btn1)    -- 升级前战斗力    local label_temp = UILabel:create_label_1("", CCSize(150,40), 100, 305, 16, CCTextAlignmentCenter, 255, 255, 0)    self.label_t[ "atta_value_left" ]  = label_temp            --存储起来，使用关键字获取并修改显示内容    panel:addChild( label_temp )    -- 升级后战斗力    local label_temp = UILabel:create_label_1("", CCSize(150,40), 320, 305, 16, CCTextAlignmentCenter, 255, 255, 0)    self.label_t[ "atta_value_right" ]  = label_temp            --存储起来，使用关键字获取并修改显示内容    panel:addChild( label_temp )    -- 需要的材料 名字    local label_temp = UILabel:create_lable_2("", 80, 45, font_size, ALIGH_LEFT)    self.label_t["need_name"] = label_temp    _left_slotitem_item_need.view:addChild(label_temp)    -- 需要材料的数量    local label_temp = UILabel:create_label_1("", CCSize(150,40), 108, 10, 16, CCTextAlignmentCenter, 255, 255, 0)    self.label_t[ "need_num" ]  = label_temp            --存储起来，使用关键字获取并修改显示内容    _left_slotitem_item_need.view:addChild( label_temp )    _item_num_need = nil        --需要花费的银子    -- local gold = CCZXImage:imageWithFile(50, 143, -1, -1, UIPIC_FORGE_049)    -- panel:addChild(gold)    --消耗title    -- local label_text = UILabel:create_label_1("消耗：", CCSize(150,40), 70, 178, 14, CCTextAlignmentCenter, 255, 255, 999)    -- panel:addChild( label_text )    -- 升级费用    local label_temp2 = UILabel:create_label_1("", CCSize(150,40), 122, 178, 16, CCTextAlignmentCenter, 255, 255, 999)    label_temp2:setIsVisible(false)    self.label_t[ "need_money" ]  = label_temp2            --存储起来，使用关键字获取并修改显示内容    panel:addChild( label_temp2 )    _pay_for_synth = 0    self:flash_all_label( )    self:draw_mid_equip_attr(panel)    -- 升级按钮     local but_1 = CCNGBtnMulTex:buttonWithFile( 242, 20, 110, 55, UIPIC_COMMOM_001, 500, 500)    btn_pos_x = panel:getSize().width/2 - but_1:getSize().width/2    but_1:setPosition(btn_pos_x,60)    but_1:addTexWithFile(CLICK_STATE_DOWN, UIPIC_COMMOM_007)    but_1:addTexWithFile(CLICK_STATE_DISABLE, UIPIC_COMMON_BUTTON_001_DISABLE)    local function but_1_fun(eventType,x,y)        if eventType == TOUCH_CLICK then             self:send_request_upgrade()            return true        end        return true    end    but_1:registerScriptHandler(but_1_fun)    --注册    panel:addChild(but_1)    -- local name_image = CCZXImage:imageWithFile( 72, 30, 72, 29, UIPIC_FORGE_077 );     -- name_image:setAnchorPoint(0.5,0.5);    local name_text =UILabel:create_lable_2( Lang.forge.sj_and_tp[3], 0,0, 18, CCTextAlignmentCenter )    local nt_pos_x = but_1:getSize().width/2 -name_text:getSize().width/2    local nt_pos_y = but_1:getSize().height/2 -name_text:getSize().height/2    name_text:setPosition(nt_pos_x+1 , nt_pos_y+3)    but_1:addChild( name_text )    but_1:setCurState( CLICK_STATE_DISABLE )    self.upgrade_but = but_1    --说明按钮    local function help_btn_callback( ... )         -- if eventType == TOUCH_CLICK then             ForgeModel:show_help_panel( UILH_FORGE.tp_notic, Lang.forge.tpsm )         -- end        -- return true    end    local help_panel = ZBasePanel:create( panel, "", 280 + 8, 245 + 189, 115, 40 )    help_panel:setTouchClickFun(help_btn_callback)    local help_btn = ZButton:create(help_panel, UILH_NORMAL.wenhao, help_btn_callback, 0, 0, -1, -1)    local help_btn_size = help_btn:getSize()    local help_img = ZImage:create(help_btn, UILH_FORGE.tp_img, 0, 0, -1, -1 )    local help_img_size = help_img:getSize()    help_img:setPosition( help_btn_size.width, ( help_btn_size.height - help_img_size.height ) / 2 )    --  local help_btn = MUtils:creat_mutable_btn( 300, 470, {x=0, y=0, w=25, h=25}, UILH_NORMAL.wenhao,{x=35, y=2, w=63, h=18},    --  UIPIC_FORGE_051, help_btn_callback )    -- panel:addChild(help_btn)    --问号图片    -- local wenhao = ZImage:create(panel,LH_UI_EXCHANGE_003,300,440,25,25,999)    --获取说明    -- local explain_but = UIButton:create_button( 330, 442, 70, 20, UILH_FORGE.tp_img, UILH_FORGE.tp_img, UILH_FORGE.tp_img,999)    -- explain_but:registerScriptHandler( help_btn_callback )    -- panel:addChild( explain_but )    -- local help_btn = ZButton:create(panel, UILH_NORMAL.wenhao, help_btn_callback, 300, 440, -1, -1)    -- local tp_img = ZImage:create(panel, UILH_FORGE.tp_img, 340, 450, -1, -1)    self.panel_t["left_panel"] = panel        --存入table，用于动态修改    --return bg_panel    return panelend-- 给一个显示面板加购买按钮 function TiPin:add_buy_but_to_show_panel( slotitem_need)     --xiehande 通用按钮修改  UIPIC_FORGE_061 ->UIPIC_COMMOM_001    local but_1 = CCNGBtnMulTex:buttonWithFile( 260, 220, -1, -1, UIPIC_COMMOM_001, 500, 500)    local function but_1_fun(eventType,x,y)        if eventType == TOUCH_CLICK then             local win_type = 5            -- local equip_type = ForgeModel:get_equipment_type(_left_slotitem_item_need.item_id)            -- ForgeDialog:show(win_type, equip_type)            ForgeDialog:show(win_type, _left_slotitem_item_need.item_id)            return true        end        return true    end    local but_name  = Lang.forge.sj_and_tp[4]    but_1:registerScriptHandler(but_1_fun)    --注册        --按钮显示的名称    local label_but_1 = UILabel:create_lable_2(but_name, 96/2, 15+5, font_size, ALIGN_CENTER)    but_1:addChild( label_but_1 )     return but_1endfunction TiPin:draw_mid_equip_attr( panel )    local width = panel:getSize().width;    _equip_attr_container_1 = CCBasePanel:panelWithFile(0, 0, width, 285, "")    _equip_attr_container_2 = CCBasePanel:panelWithFile(0, 0, width, 285, "")    panel:addChild(_equip_attr_container_1)    panel:addChild(_equip_attr_container_2)    -- 左右两边的物防、法防label    local phy_def_label_l = UILabel:create_lable_2("", 85, 265, font_size, ALIGN_RIGHT)    local phy_def_label_r = UILabel:create_lable_2("", 313, 265, font_size, ALIGN_RIGHT)    local mag_def_label_l = UILabel:create_lable_2("", 85, 230, font_size, ALIGN_RIGHT)    local mag_def_label_r = UILabel:create_lable_2("", 313, 230, font_size, ALIGN_RIGHT)    _equip_attr_container_1:addChild(phy_def_label_l)    _equip_attr_container_1:addChild(phy_def_label_r)    _equip_attr_container_2:addChild(mag_def_label_l)    _equip_attr_container_2:addChild(mag_def_label_r)    self.label_t["equip_attr_name_1l"] = phy_def_label_l    self.label_t["equip_attr_name_1r"] = phy_def_label_r    self.label_t["equip_attr_name_2l"] = mag_def_label_l    self.label_t["equip_attr_name_2r"] = mag_def_label_r    -- 左右两边物防、法防数值底框    local phy_def_bg_l = CCBasePanel:panelWithFile(93, 260, 80, 30, "", 500, 500)    local phy_def_bg_r = CCBasePanel:panelWithFile(332, 260, 80, 30, "", 500, 500)    local mag_def_bg_l = CCBasePanel:panelWithFile(93, 223, 80, 30, "", 500, 500)    local mag_def_bg_r = CCBasePanel:panelWithFile(332, 223, 80, 30, "", 500, 500)    _equip_attr_container_1:addChild(phy_def_bg_l)    _equip_attr_container_1:addChild(phy_def_bg_r)    _equip_attr_container_2:addChild(mag_def_bg_l)    _equip_attr_container_2:addChild(mag_def_bg_r)    _equip_attr_container_1:setIsVisible(false)    _equip_attr_container_2:setIsVisible(false)    -- 左右两边物防、法防数值    local phy_def_val_l = UILabel:create_lable_2("", 5, 6, font_size)    local phy_def_val_r = UILabel:create_lable_2("", 5, 6, font_size)    local mag_def_val_l = UILabel:create_lable_2("", 5, 6, font_size)    local mag_def_val_r = UILabel:create_lable_2("", 5, 6, font_size)    phy_def_bg_l:addChild(phy_def_val_l)    phy_def_bg_r:addChild(phy_def_val_r)    mag_def_bg_l:addChild(mag_def_val_l)    mag_def_bg_r:addChild(mag_def_val_r)    self.label_t["equip_attr_val_1l"] = phy_def_val_l    self.label_t["equip_attr_val_1r"] = phy_def_val_r    self.label_t["equip_attr_val_2l"] = mag_def_val_l    self.label_t["equip_attr_val_2r"] = mag_def_val_rend-- 显示选中的装备的属性function TiPin:show_equi_attr( item_date )    if item_date == nil then        _equip_attr_container_1:setIsVisible(false)        _equip_attr_container_2:setIsVisible(false)        return     end    _equip_attr_container_1:setIsVisible(true)    _equip_attr_container_2:setIsVisible(true)    --基础属性    require "config/ItemConfig"    local attr_t = ItemConfig:get_staitc_attrs_by_id( item_date.item_id )  -- 装备的基础属性值 表    -- 获取当前当即加强的属性    -- local strong_curr_attr = ItemConfig:get_strong_attr_by_level( item_date.item_id, item_date.strong )    -- 获取下一个强化等级加强的属性    -- local strong_next_attr = 0    -- if item_date.strong ~= nil then    --     strong_next_attr = ItemConfig:get_strong_attr_by_level( item_date.item_id, item_date.strong )    -- end    local cur_user_item = UserInfoModel:get_equi_by_id( _left_slotitem_item_source.item_series )    -- local user_item = UserInfoModel:get_equi_by_id( _left_slotitem_item_target.item_series )    local user_item = _left_slotitem_item_target.equip_info            local _user_item = {};            _user_item.series = "series";            _user_item.item_id = user_item.item_id;            _user_item.strong = user_item.strong;            _user_item.flag = user_item.flag;            _user_item.holes = { user_item.holes[1],user_item.holes[2],user_item.holes[3]}            _user_item.void_bytes_tab = {user_item.void_bytes_tab[1]+1};            _user_item.smith_num = user_item.smith_num;            _user_item.smiths = { user_item.smiths[1],user_item.smiths[2],user_item.smiths[3] }            user_item = nil;            user_item = _user_item;        -- 第一属性    if attr_t[1] ~= nil then        local str_temp = ""        local attr_name = ForgeCommon:get_attr_name_by_type( attr_t[1]["type"] )                -- 属性名称        -- local value = ItemModel:get_equip_base_single_attr_atta( item_date.item_id, item_date.void_bytes_tab[1], 1 )        local curr_attr_value = ForgeModel:get_equipment_base_attri_text( cur_user_item, 1 )        local next_attr_value = ForgeModel:get_equipment_base_attri_text( user_item, 1 )        self.label_t["equip_attr_name_1l"]:setString("#cffffff" .. attr_name)        self.label_t["equip_attr_val_1l"]:setString("#c00ff00+" .. curr_attr_value)        -- if strong_next_attr ~= nil then            self.label_t["equip_attr_name_1r"]:setString("#cffffff" .. attr_name)            self.label_t["equip_attr_val_1r"]:setString("#c00ff00+" .. next_attr_value)        -- end    else         _equip_attr_container_1:setIsVisible(false)    end    if attr_t[2] ~= nil then        local str_temp = ""        local attr_name = ForgeCommon:get_attr_name_by_type( attr_t[2]["type"] )                -- 属性名称        -- local value = ItemModel:get_equip_base_single_attr_atta( item_date.item_id, item_date.void_bytes_tab[1], 2 )        local curr_attr2_value = ForgeModel:get_equipment_base_attri_text( cur_user_item, 2 )        local next_attr2_value = ForgeModel:get_equipment_base_attri_text( user_item, 2 )        self.label_t["equip_attr_name_2l"]:setString("#cffffff" .. attr_name)        self.label_t["equip_attr_val_2l"]:setString("#c00ff00+" .. curr_attr2_value)        -- if strong_next_attr ~= nil then            self.label_t["equip_attr_name_2r"]:setString("#cffffff" .. attr_name)            self.label_t["equip_attr_val_2r"]:setString("#c00ff00+" .. next_attr2_value)        -- end    else         _equip_attr_container_2:setIsVisible(false)    end    -- 成功率和消耗    -- require "config/EquipEnhanceConfig"    -- local succ_per = ForgeModel:get_strengthen_success_percent(  )    -- self:update_zhan_bu_buff_info( succ_per )end-- 创建一个item 包括slotitem和信息 function TiPin:create_item( panel, item_series, po_x , po_y, size_w, size_h , item_type)    local slotItem = SlotItem(64, 64)    slotItem:set_icon_bg_texture( UILH_COMMON.slot_bg, -10, -10, 84, 84 )   -- 背框    --获取item_id 。默认用一个不存在的id  0，可以去到默认图标    local item_id = 0    slotItem:setPosition( po_x , po_y )    --设置回调单击函数    -- local function f1()    --     if "source" == item_type then    --         self:set_r_up_one_slot_able( slotItem.equip_info.series )    --         self:set_left_item( "", 0, nil, nil)    --         _item_num_need = nil    --         _item_num_have = nil    --         self:flash_all_label()    --     elseif "target" == item_type then    --     -- elseif "item_need" == item_type then    --     --     ForgeModel:show_item_tips( slotItem.item_id )    --     end    -- end    -- slotItem:set_double_click_event( f1 )    local function f2( ... )        local a, b, arg = ...        local position = Utils:Split(arg,":");            -- 将相对坐标转化成屏幕坐标(即OpenGL坐标 800x480)        local pos = slotItem.view:getParent():convertToWorldSpace( CCPointMake(position[1],position[2]) );                 if ( item_type ~= "item_need" ) then            if ( slotItem.equip_info ) then                local user_item = slotItem.equip_info;                 if ( item_type == "target" ) then                    local _user_item = {};                    _user_item.series = "series";                    _user_item.item_id = user_item.item_id;                    _user_item.strong = user_item.strong;                    _user_item.flag = user_item.flag;                    _user_item.holes = { user_item.holes[1],user_item.holes[2],user_item.holes[3]}                    _user_item.void_bytes_tab = {user_item.void_bytes_tab[1]+1};                    _user_item.smith_num = user_item.smith_num;                    _user_item.smiths = { user_item.smiths[1],user_item.smiths[2],user_item.smiths[3] }                    user_item = _user_item;                end                TipsModel:show_tip( pos.x, pos.y,user_item )            end                    else            ForgeModel:show_item_tips( slotItem.item_id, pos.x, pos.y )        end    end    slotItem:set_click_event( f2 )    panel:addChild( slotItem.view )    -- -- 加默认提示字    -- local show_notice_word = ""    -- if "source" == item_type then    --     show_notice_word = UIResourcePath.FileLocate.role .. "text_zhuangbei.png"    -- elseif "target" == item_type then    --     show_notice_word = UIResourcePath.FileLocate.role .. "text_zhuangbei.png"    -- else     --     show_notice_word = UIResourcePath.FileLocate.role .. "text_cailiao.png"    -- end     -- -- slotItem.default_word = UILabel:create_label_1(show_notice_word, CCSize(100,15), 30, 30, 12, CCTextAlignmentCenter, 255, 255, 0)        -- slotItem.default_word = CCZXImage:imageWithFile( 0, 0, 55, 55, show_notice_word )    -- slotItem.view:addChild( slotItem.default_word )           --因为lable要随slot共存亡，所以是添加到slot的view中    --需要item存储一下选中的slot的数据。初始化设置为nil(起始可以不写，这里是为了有一种"定义了的"印象)    slotItem.level       = nil    slotItem.item_series = nil    slotItem.item_id     = nil    return slotItemend-- 设置左侧，item的属性:类型 字符串（ 无用 ）,物品id(是基本属性，不是序列号，注意了)function TiPin:set_left_item( type, item_id, strong_level, item_series)    if item_id == nil or item_id == 0 or item_series == nil then        --self.meta_panel:setIsVisible(false)    else       -- self.meta_panel:setIsVisible(true)    end    if ( item_series ) then        -- 先取得item_series对应的userItem        local user_item = nil;          if ( _r_up_equi_or_bag == "equipment" ) then            user_item = UserInfoModel:get_equi_by_id( item_series )        elseif ( _r_up_equi_or_bag == "bag" ) then            user_item = ItemModel:get_item_by_series( item_series )        end         -- 先判断 用该item_id是否能找到静态数据        require "config/ItemConfig"        local item_base = ItemConfig:get_item_by_id( item_id )        -- target_item_id ：该id升级后的物品id； meta_item_id ：需要的材料id， mete_need_num ：需要的数量        local target_item_id, meta_item_id, mete_need_num,need_money = self:get_tp_info_by_id( user_item ,item_base.type)        _left_slotitem_item_source.equip_info = user_item                                           --记录装备数据        _left_slotitem_item_target.equip_info = user_item                                            --记录装备数据        _left_slotitem_item_source:set_color_frame( item_id, -2, -2, 68, 68 )                                           -- 左装备颜色框        _left_slotitem_item_source.item_series  = item_series                                           --记录序列号，发送请求的时候需要        _left_slotitem_item_source.item_id = item_id          _left_slotitem_item_target:set_color_frame( target_item_id, -2, -2, 68, 68 )              -- 右装备颜色框        -- 设置升级后的物品。注意，可以升级的物品，id号为十位加1.例如：碧晶枪（1111） 升为20级套装，就为 1121        local pj = ItemModel:get_item_pj( item_base )        _left_slotitem_item_target:set_item_quality( user_item.void_bytes_tab[1] + 1,pj )        _left_slotitem_item_target:set_icon( target_item_id )        _left_slotitem_item_target.item_id = target_item_id        _left_slotitem_item_target.item_series = item_series        _left_slotitem_item_source:set_item_quality( user_item.void_bytes_tab[1],pj )         _left_slotitem_item_source:set_icon( item_id )                                              --设置图标        -- 设置需要的材料        _left_slotitem_item_need:set_icon( meta_item_id )        _left_slotitem_item_need.item_id = meta_item_id        -- 数量        _item_num_need = mete_need_num                                      -- 需要的数量，已经配置好        _item_num_have = self:get_mate_num( meta_item_id )                  -- 背包中拥有的辅助材料的数量        _pay_for_synth = need_money;                                        -- 升级需要的钱        -- 战斗力label        local atta_value_left = _static_quantity_color[item_base.color+1].."【".._static_quantity_str[ user_item.void_bytes_tab[1] ].."】";        local atta_value_right = _static_quantity_color[item_base.color+1].."【".._static_quantity_str[ user_item.void_bytes_tab[1]+1 ].."】";        self.label_t[ "atta_value_left" ]:setString( atta_value_left..item_base.name )        self.label_t[ "atta_value_right" ]:setString( atta_value_right..item_base.name )        -- 设置图标的强化等级        if strong_level then            _left_slotitem_item_source:set_strong_level( strong_level )            _left_slotitem_item_target:set_strong_level( strong_level )        end        self:set_slot_lock( item_series, _left_slotitem_item_source)        self:set_slot_lock( item_series, _left_slotitem_item_target)        -- 是否显示提示字        -- _left_slotitem_item_source.default_word:setIsVisible(false)        local item_date = ForgeModel:get_item_in_bag_or_body( item_series )        self:show_equi_attr(item_date)        self:check_action_but_able()    else        _left_slotitem_item_need:set_icon( 0 )        -- _left_slotitem_item_source.default_word:setIsVisible(true)        _left_slotitem_item_source:set_icon_texture( "" )                                           -- 如果找不到，就去掉背景图        _left_slotitem_item_target:set_icon_texture( "" )          _left_slotitem_item_need:set_icon_texture( "" )        _left_slotitem_item_source:set_strong_level( 0 )        _left_slotitem_item_target:set_strong_level( 0 )         -- 去掉品质特效        _left_slotitem_item_source:set_item_quality(nil);        _left_slotitem_item_target:set_item_quality(nil);        _left_slotitem_item_target.equip_info = nil;        _left_slotitem_item_source.equip_info = nil;                self:set_slot_lock( nil, _left_slotitem_item_source)        self:set_slot_lock( nil, _left_slotitem_item_target)             self.label_t[ "atta_value_left" ]:setString( "" )        self.label_t[ "atta_value_right" ]:setString( "" )         _item_num_need = nil        _item_num_have = nil        _pay_for_synth = 0;        self:check_action_but_able()    end    self:flash_all_label()         end-- 根据道具id，获取升级信息。 返回三个值：该id升级后的物品id， 需要的材料id， 需要的数量function TiPin:get_tp_info_by_id( user_item,item_type )    local ret_use_count = 0;                            -- 使用的数量    local ret_item_id = 0;    local need_money = 0;    print("user_item.void_bytes_tab[1]",user_item.void_bytes_tab[1]);    ret_item_id,need_money,ret_use_count = EquipEnhanceConfig:get_tp_info( item_type,user_item.void_bytes_tab[1] )    print("ret_item_id,need_money,ret_use_count",ret_item_id,need_money,ret_use_count,user_item.item_id)    return user_item.item_id, ret_item_id, ret_use_count,need_money        end-- 获取需要的升级辅助材料的数量function TiPin:get_mate_num( item_id )    local count_ret = 0    _mate_series_t = {}    local bag_items, bag_item_count = ItemModel:get_bag_data() --背包中物品的集合和数量    local item_bag = nil                                       --背包中存储的item数据，注意和基本item数据区分    --遍历背包中的所有装备，创建出item显示出来    for i = 1, bag_item_count do        item_bag = bag_items[i]        -- 判断是否是要计数的 item_id        if item_bag and item_bag.item_id == item_id then            _mate_series_t[ #_mate_series_t + 1] = item_bag.series            count_ret = count_ret + item_bag.count        end    end    return count_retend-- 刷新所有label，根据新值，从新设置label的内容function TiPin:flash_all_label( )    if _item_num_need ~= nil and _item_num_need ~= 0 then               --如果需要的数字为空或者0，则不显示        local color_hex = nil        -- self.label_t[ "need_num" ]:setString( _item_num_have .. "/" .. _item_num_need )           self.label_t["need_name"]:setString("#cfff000" .. ForgeModel:get_item_name_with_color(_left_slotitem_item_need.item_id))        -- 如果材料不够，则显示红色        if _item_num_have < _item_num_need then            -- UILabel:setAttrColor(self.label_t[ "need_num" ], 255, 0, 0)            color_hex = "#c"..Utils:hex_to_dec(255)..Utils:hex_to_dec(0)..Utils:hex_to_dec(0)        else            -- UILabel:setAttrColor(self.label_t[ "need_num" ], 255, 255, 0)            color_hex = "#c"..Utils:hex_to_dec(255)..Utils:hex_to_dec(255)..Utils:hex_to_dec(0)        end         -- self.label_t[ "need_money" ]:setString(LangGameString[1005].._pay_for_synth..LangGameString[411]);   -- [1005]="手续费:" -- [411]="仙币"        self.label_t[ "need_num" ]:setString( color_hex.._item_num_have .. "/" .. _item_num_need )         self.label_t[ "need_money" ]:setString("#cfff000".._pay_for_synth);    else        self.label_t[ "need_num" ]:setString( "" )        self.label_t[ "need_money" ]:setString("");         end    end-- 设置转移按钮是否可以有效function TiPin:check_action_but_able(  )    if _item_num_need == nil or _item_num_need == 0 or _item_num_have < _item_num_need then         self.upgrade_but:setCurState( CLICK_STATE_DISABLE )    else        self.upgrade_but:setCurState( CLICK_STATE_UP )    endend-- 发送装备升级的消息function TiPin:send_request_upgrade(  )    ForgeWin:set_if_waiting_result( true )    ForgeWin:set_if_waiting_reflash( true )    -- 如果辅助材料不足，就不发送    if _item_num_have < _item_num_need then         return     end    local item_count = 1 + #_mate_series_t                                    -- 物品个数    local id_items   = { _left_slotitem_item_source.equip_info.series}              -- 物品的序列号    for i, v in ipairs(_mate_series_t) do        id_items[#id_items + 1] = v    end    local htype      = 12                                                     -- 操作类型,装备提品    local param_count = 0    local param_arr  = {  }                                        -- print("装备提品...........................................",item_count, id_items, htype)    ItemCC:req_handle_item (item_count, id_items, htype, param_count, param_arr)end--================================================================================================================================--================================================================================================================================----右侧----================================================================================================================================--================================================================================================================================---创建左侧panelfunction TiPin:create_left_panel( pos_x, pos_y, width, height, texture_name )    local panel = CCBasePanel:panelWithFile( pos_x, pos_y, width, height, texture_name, 500, 500 )    self.r_up_but_t = {}               -- 按钮做成单选用,需要操作所有按钮，设置状态    self:create_bag_slot( panel )    -- -- 角色按钮  :对于不用在其他代码位置获取的按钮，直接使用数字命名，方便复制到其他位置使用    -- local but_1 = CCNGBtnMulTex:buttonWithFile( 2, 316, 215, -1, UIResourcePath.FileLocate.common .. "qd_bg2.png", 34, 15, 34, 15, 34, 15, 34, 15)    -- but_1:addTexWithFile(CLICK_STATE_DOWN, UIResourcePath.FileLocate.common .. "qd_bg2_d.png")    -- --but_1:addTexWithFile(CLICK_STATE_DISABLE, "ui/common/title_bg_01_n.png")    -- local function but_1_fun(eventType,x,y)    --     if eventType == TOUCH_CLICK then     --         -- 清理所有slot     --         self:set_left_item( "", 0, nil, nil)    --         _r_up_equi_or_bag = "equipment"    --         self:but_select_one( "right_up", 1 )            -- 单选，设置当前按钮为按下状态，其他按钮非按下    --         self:flash_all_item_right( )    --         return true    --     end    --     return true    -- end    -- but_1:registerScriptHandler(but_1_fun)    --注册    -- panel:addChild(but_1)    -- --按钮显示的名称    -- local label_but_1 = UILabel:create_label_1(LangGameString[1000], CCSize(100,15), 140 ,  16, 15, CCTextAlignmentLeft, 255, 255, 0) -- [1000]="角色"    -- but_1:addChild( label_but_1 )     -- self.r_up_but_t[ 1 ] = but_1                -- -- 背包按钮  :对于不用在其他代码位置使用引用的按钮，直接使用数字命名，方便复制到其他位置使用    -- local but_2 = CCNGBtnMulTex:buttonWithFile( 217, 316, 215, -1, UIResourcePath.FileLocate.common .. "qd_bg2.png", 34, 15, 34, 15, 34, 15, 34, 15)    -- but_2:addTexWithFile(CLICK_STATE_DOWN, UIResourcePath.FileLocate.common .. "qd_bg2_d.png")    -- --but_2:addTexWithFile(CLICK_STATE_DISABLE, "ui/common/title_bg_01_n.png")    -- local function but_2_fun(eventType,x,y)    --     if eventType == TOUCH_CLICK then    --         -- 清理所有slot     --         self:set_left_item( "", 0, nil, nil)    --         _r_up_equi_or_bag = "bag"    --         self:but_select_one( "right_up", 2 )            -- 单选，设置当前按钮为按下状态，其他按钮非按下    --         self:flash_all_item_right( )    --         return true    --     end    --     return true    -- end    -- but_2:registerScriptHandler(but_2_fun)    --注册    -- panel:addChild(but_2)    -- --按钮显示的名称    -- local label_but_2 = UILabel:create_label_1(LangGameString[1001], CCSize(100,15), 140 ,  16, 15, CCTextAlignmentLeft, 255, 255, 0) -- [1001]="背包"    -- but_2:addChild( label_but_2 )      -- self.r_up_but_t[ 2 ] = but_2     -- local btn_1       = ZImage:create(panel, string.format("%s%s",UIResourcePath.FileLocate.common,"quan_bg2.png"), 3, 145+61+116, 430, 28, 2,34, 15, 34, 15, 34, 15, 34, 15)    -- local label_but_1 = ZLabel:create(panel, LangGameString[1311], 3+430*0.5, 145-8+61+116+28*0.5, 15, ALIGN_CENTER, 3)    self.panel_t["right_panel"] = panel                   --存入table，用于动态修改    -- 默认选中1    -- self:but_select_one( "right_up", 1 )    return panelend--创建右侧物品栏的一个item 和 信息。因为和左侧物品处理方式不一样，要分开写一个方法。--参数：父panel、物品id（当使用默认图标时，使用nil）、坐标、大小、num表示等级或者数量local row_index_count = 1         -- 存储入self.row_t 的序号，用来防止多次创建，key重复，造成scroll销毁，通知从self.row_t删除。而新建的也被删了。function TiPin:create_item_right( item_id, po_x , po_y, size_w, size_h , num, item_series)    require "config/ItemConfig"    local item = ItemConfig:get_item_by_id( item_id )     --获取item基本信息   local slot_w, slot_h = 64, 64    local slotItem = SlotItem(slot_w, slot_h)    slotItem.view:setScale( 54 / 64 )    slotItem:set_icon_bg_texture(UIPIC_COMMON_FY_003, -9.5, -9.5, 83, 83)   -- 背框        if item_id == nil then        item_id = 0                               --设置一个不存在的值，会获取到默认图标    end    slotItem:set_icon( item_id )    self:set_slot_lock( item_series, slotItem)    slotItem.item_series = item_series    slotItem:set_color_frame( item_id, -2, -2, 68, 68 )    slotItem:setPosition( po_x , po_y )    -- 设置图标的强化等级    if num then        slotItem:set_strong_level( num )    else        slotItem:set_strong_level( 0 )    end    --设置回调单击函数    local function f1()        self:set_left_item( "", item_id, num, item_series)        self:set_r_up_one_slot_disable( slotItem  )        _cur_selected_item = slotItem    end    slotItem.f1 = f1    slotItem:set_click_event(f1)    -- slotItem:set_double_click_event( f1 )    -- local function f2( arg )    --     local position = Utils:Split(arg,":");    --         -- 将相对坐标转化成屏幕坐标(即OpenGL坐标 800x480)    --     local pos = slotItem.view:convertToWorldSpace( CCPointMake(position[1],position[2]) );    --     if ( slotItem.item_series ) then    --         local user_item = {};    --         if ( _r_up_equi_or_bag == "equipment" ) then    --             user_item = UserInfoModel:get_equi_by_id( slotItem.item_series )    --         elseif ( _r_up_equi_or_bag == "bag" ) then    --             user_item = ItemModel:get_item_by_series( slotItem.item_series )    --         end    --         TipsModel:show_tip( pos.x, pos.y,user_item )    --     end                -- end    -- slotItem:set_click_event( f2 )    --显示信息:名称和数字   -- local dimensions = CCSize(100,15)    local label_temp = UILabel:create_lable_2(item.name, 75, 45, 17, ALIGH_LEFT)    print("名字",item.name)    slotItem.name_label  = label_temp              --存储起来，使用关键字获取并修改显示内容    slotItem.view:addChild( label_temp )           --因为lable要随slot共存亡，所以是添加到slot的view中    require "UI/forge/ForgeCommon"    ForgeCommon:set_label_color_by_type( item.color, label_temp )    -- 先取得item_series对应的userItem    local user_item = nil;      if ( _r_up_equi_or_bag == "equipment" ) then        user_item = UserInfoModel:get_equi_by_id( item_series )    elseif ( _r_up_equi_or_bag == "bag" ) then        user_item = ItemModel:get_item_by_series( item_series )    end    label_temp = UILabel:create_lable_2("【".._static_quantity_str[ user_item.void_bytes_tab[1] ].."】", 75, 0, 17, ALIGH_LEFT)    slotItem.num_label  = label_temp               --存储起来，使用关键字获取并修改显示内容    slotItem.view:addChild( label_temp )           --因为lable要随slot共存亡，所以是添加到slot的view中    local pj = ItemModel:get_item_pj( item )    -- 播放装备品质的特效    slotItem:set_item_quality( user_item.void_bytes_tab[1],pj )    -- panel:addChild( slotItem.view )    slotItem.update_data = function( )        local user_item = nil;          if ( _r_up_equi_or_bag == "equipment" ) then            user_item = UserInfoModel:get_equi_by_id( item_series )        elseif ( _r_up_equi_or_bag == "bag" ) then            user_item = ItemModel:get_item_by_series( item_series )        end        slotItem.num_label:setString("【".._static_quantity_str[ user_item.void_bytes_tab[1] ].."】")        local pj = ItemModel:get_item_pj( item )        -- 播放装备品质的特效        slotItem:set_item_quality( user_item.void_bytes_tab[1],pj )    end    -- 当滑动区域，item消失，就会销毁view。  这里在这个事件发生时，把本slotitem从 slot集合中清除    local function delete_callback()        self.right_item_t[ slotItem.row_t_index ]   = nil    end    slotItem:set_delete_event( delete_callback )    slotItem.row_t_index = row_index_count         -- 存入表中的key    row_index_count = row_index_count + 1          -- 每创建一个，计数加1    self.right_item_t[ slotItem.row_t_index ] = slotItem        return slotItemend--创建背包中的可升级物品slotitem:参数：要加入的面板， 物品的类型（宝贝，翅膀等 ）function TiPin:create_bag_slot( panel )    --坐标计算    local slot_beg_x = 20         --起始x坐标    local slot_beg_y = 255        --起始x坐标    local slot_int_x = 100        --横坐标间隔    local slot_int_y = 45         --纵坐标间隔        --遍历玩家装备    require "config/ItemConfig"    local check_info = nil;    if ( _r_up_equi_or_bag == "equipment" ) then        check_info = UserInfoModel:get_equi_info()        --所有装备信息    elseif ( _r_up_equi_or_bag == "bag" ) then        check_info = ItemModel:get_bag_data();    end    local equip = nil   -- local place_index = 1                                      --这里物品不是每个都显示的，所以位置要分开计数    -- local item_base = nil                                      --基础item数据，用来获取物品的公共属性    local check_table = {}                                     -- 判断是否可以升级的table    local slotItem_t = {}    local slot_par = {}    i=1    for i , v in ipairs(check_info) do        equip = v        -- 获取装备的基础信息        -- 判断该id是否可以升级        if equip.void_bytes_tab[1]<5 and self:check_item_can_tp(equip.item_id) then            -- self:create_item_right( panel, equip.item_id, slot_beg_x + slot_int_x*  ((place_index - 1) % 4 ) , slot_beg_y - slot_int_y  * ((place_index - 1) / 4 - (place_index - 1)/4%1 ) , 40, 40, equip.strong, equip.series)            -- place_index = place_index + 1            slot_par[ #slot_par + 1] = { equip.item_id, 15, 20 , 55, 55, equip.strong, equip.series }        end    end     row_index_count = 1     _t_scroll_item_info.x = 10     _t_scroll_item_info.y = 18     _t_scroll_item_info.width = panel:getSize().width - _t_scroll_item_info.x * 2     _t_scroll_item_info.height = panel:getSize().height - _t_scroll_item_info.y * 2     _t_scroll_item_info.x_num = 2     print("TiPin #slot_par",#slot_par)    local scroll = self:create_scroll_area( slot_par, _t_scroll_item_info.x - 5,  _t_scroll_item_info.y, _t_scroll_item_info.width, _t_scroll_item_info.height, _t_scroll_item_info.x_num, 4, nil)    local arrow_up = CCZXImage:imageWithFile(_t_scroll_item_info.x - 5 + _t_scroll_item_info.width , _t_scroll_item_info.y + _t_scroll_item_info.height-5, 10, -1 , UILH_COMMON.scrollbar_up, 500, 500)    local arrow_down = CCZXImage:imageWithFile(_t_scroll_item_info.x - 5 + _t_scroll_item_info.width, _t_scroll_item_info.y - 5, 10, -1, UILH_COMMON.scrollbar_down, 500 , 500)    scroll:setScrollLump(UILH_COMMON.up_progress, UILH_COMMON.down_progress, 10, 30, 460 )    scroll:setScrollLumpPos(_t_scroll_item_info.width)    panel:addChild( scroll )     panel:addChild(arrow_up)    panel:addChild(arrow_down)    self.r_down_scroll = scroll    self.slot_par = slot_parend-- 默认选中第一个function TiPin:set_default_item(  )    -- 默认选中第一个    local slot_par = self.slot_par    if not slot_par then        return    end    if #slot_par > 0 then        local item_panel = self.right_item_t[1]        for k,v in pairs(self.right_item_t) do            item_panel = v            if item_panel then                item_panel.f1()                return            end        end    endend-- 创建可拖动区域   参数：放入scroll的panel的集合, 坐标， 区域大小，列数， 背景名称function TiPin:create_scroll_area( panel_table_para ,pos_x, pos_y, size_w, size_h, colu_num, sight_num, bg_name)    local row_num = math.ceil(#panel_table_para / colu_num)    print("row_num",row_num)    if row_num < 1 and row_num > 0 then        row_num = 1    end    -- local scroll = CCScroll:scrollWithFile(pos_x, pos_y, size_w, size_h, sight_num, colu_num, row_num + 1, bg_name, TYPE_VERTICAL, 500,500)    -- scroll:setEnableCut(true)    local _scroll_info = { x = pos_x, y = pos_y, width = size_w, height = size_h, maxnum = row_num, image = bg_name, stype = TYPE_HORIZONTAL }    local scroll = CCScroll:scrollWithFile( _scroll_info.x, _scroll_info.y, _scroll_info.width, _scroll_info.height, _scroll_info.maxnum, _scroll_info.image, _scroll_info.stype )    local function scrollfun(eventType, args, msg_id)        if eventType == nil or args == nil or msg_id == nil then             return        end        if eventType == TOUCH_BEGAN then            return true        elseif eventType == TOUCH_MOVED then            return true        elseif eventType == TOUCH_ENDED then            return true        elseif eventType == SCROLL_CREATE_ITEM then             local temparg = Utils:Split(args,":")            local x = temparg[1]              -- 行            local index = x * colu_num             local row_h = 93            local t_dis_y = 3            local row_w = _t_scroll_item_info.width            local bg_vertical = CCBasePanel:panelWithFile( 0, t_dis_y / 2, row_w, row_h, "" )            local colu_with = 190            local indent_x= 22   --缩进            local space_x = ( _t_scroll_item_info.width - colu_with * 2 ) / 5    --列距            for i = 1, colu_num do                print("colu_num,index,i",colu_num,index,i)                if panel_table_para[index + i] then                    local bg = self:create_item_show_panel( panel_table_para[index + i],                         (i - 1) * colu_with + space_x * i, 0,                         colu_with, row_h )                    bg_vertical:addChild(bg.view)                else                    local bg = CCBasePanel:panelWithFileS(CCPointMake(0,0),CCSizeMake(colu_with,row_h),nil)                    bg_vertical:addChild(bg)                end            end            local item = CCBasePanel:panelWithFile(0, 0, row_w, row_h + t_dis_y, "")            item:addChild(bg_vertical)            scroll:addItem(item)            scroll:refresh()            return false        end    end     --滚动条滑块   -- scroll:setScrollLump( UIPIC_COMMON_PROGESS_UP,UIPIC_COMMON_PROGESS_BG, 16, 10, size_h / row_num )    scroll:registerScriptHandler(scrollfun)    scroll:refresh()    return scrollend-- 创建一个道具显示面板function TiPin:create_item_show_panel( panel_date, x, y, w, h )    local t = panel_date                -- 历史原因，使用t    if panel_date == nil then        return nil    end    local item_show_panel = {}    local item_show_panel_bg = CCBasePanel:panelWithFile( x, y , w, h, UILH_COMMON.bg_10, 500, 500 )    item_show_panel.view = item_show_panel_bg    local slotItem = self:create_item_right( t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8] )    if slotItem then        item_show_panel.view:addChild(slotItem.view)    end    item_show_panel.update_data = slotItem.update_data        local selected_bg = CCBasePanel:panelWithFile(0, 0, w, h, UILH_COMMON.slot_focus, 500, 500)    item_show_panel.view:addChild(selected_bg)    selected_bg:setIsVisible(false)    item_show_panel.set_selected = function( show_flash )        selected_bg:setIsVisible(show_flash)    end    function click_bg_fun( eventType )        if eventType == TOUCH_CLICK then            slotItem.f1()        end    end    item_show_panel.view:registerScriptHandler(click_bg_fun)    slotItem.bg = item_show_panel    return item_show_panelend-- 判断一个装备是否可以升级function TiPin:check_item_can_tp( item_id )    require "config/EquipEnhanceConfig"    local upgrade_t = EquipEnhanceConfig:get_can_tp_items( )    for i, v in ipairs(upgrade_t) do                    -- 遍历升级信息表，查询每个等级的itemid集合        if v == item_id then                    --             return true        end    end    return falseend--刷新右侧所有item. function TiPin:flash_all_item_right( )    self:remove_all_item_right( )    self:create_bag_slot( self.panel_t["right_panel"] )end--清空右侧面板所有itemfunction TiPin:remove_all_item_right( )    local panel  = self.panel_t["right_panel"]           --默认上面的装备面板    local item_table = self.right_item_t                 --上面所有item的table    panel:removeChild(self.r_down_scroll, true)      for key, slotitem in pairs(item_table) do        panel:removeChild( slotitem.view, true )    end    self.right_item_t = {}                                      -- 清空以后，表也要清空end-- -- 设置制定slot为无效效状态function TiPin:set_r_up_one_slot_disable( slotItem  )    -- 必须先设置其他为有效装备    for i, slot in pairs(self.right_item_t) do         -- slot:set_slot_enable()        slot.bg.set_selected(false)    end    -- slotItem:set_slot_disable( )    slotItem.bg.set_selected(true)end-- 设置材料栏某个item可以点击function TiPin:set_r_up_one_slot_able( item_series )    for i, slot in pairs(self.right_item_t) do         if slot.item_series == item_series then            slot:set_slot_enable()        end    endend-- 设置锁function TiPin:set_slot_lock( item_series, slotItem )    if item_series == nil and slotItem then        slotItem:set_lock(false)        return    end    if _r_up_equi_or_bag == "equipment" then        local item = UserInfoModel:get_equi_by_id( item_series )        if item then            slotItem:set_lock(item.flag == 1)        end    else        local item = ItemModel:get_item_by_series( item_series )        if item then            slotItem:set_lock(item.flag == 1)        end    endend-- 设置按钮状态（实现单选），参数：位置标记，按钮序列号function TiPin:but_select_one( place, index )    local but_table = {}    if place == "right_up" then        but_table = self.r_up_but_t    end    for i, v in ipairs( but_table ) do        v:setCurState( CLICK_STATE_DOWN )    end    if but_table[ index ] then        but_table[ index ]:setCurState( CLICK_STATE_UP )    endendfunction TiPin:active()end